#include <stdlib.h>
#include <stdio.h>
#include <limits.h>

#include "<NAME>_graph.h"
#include "<NAME>_graphalg.h"
#include "generic_list.h"
#include "generic_set.h"
#include "integer_uf.h"
#include "generic_heap.h"

/* WARN: Works only for integers !!! */

/* This order has an influence on the building of the heap: heap max or heap min */
static int compareWEdge (const void* a, const void* b) {
  we_t *we1 = (we_t*) a;
  we_t *we2 = (we_t*) b;

  /* To have a heap min reverse order of the conventional order given by strcmp */
  if (we1->weight > we2->weight) {
    return -1;
  }
  else if (we1->weight < we2->weight) {
    return 1;
  }
  else {
    return 0;
  }
}

static void* buildWEdge (const void* a) {
  we_t *we1 = (we_t*) a;
  we_t *newWE = malloc (sizeof(we_t));
  newWE->source = we1->source;
  newWE->destination = we1->destination;
  newWE->weight = we1->weight;

  return newWE;
}

/* Kruskal'a algorithm */
/*   1   A := emptyset
     2   pour chaque sommet v de G :
     3      créerEnsemble(v)
     4   trier les arêtes de G par poids croissant
     5   pour chaque arête (u, v) de G prise par poids croissant :
     6      si find(u) != find(v) :
     7         ajouter l'arête (u, v) à l'ensemble A
     8         union(u, v)
     9   renvoyer A */

int <NAME>_mst(<NAME>_graph_t *graph, generic_list_t **span) {
  /* Step 0 : max index of vertices */
  int maxIndex = INT_MIN;
  generic_list_elmt_t *vindex = generic_list_head (&(graph->adjlists));
  for (; vindex != NULL; vindex = generic_list_next (vindex)) {
    <NAME>_adjlist_t* node = generic_list_data (vindex);
    if (node->vertex > maxIndex) {
      maxIndex = node->vertex;
    }
  }

  <NAME>_uf_t dset;
  <NAME>_uf_init (&dset, maxIndex+1);

  generic_heap_t heap;
  generic_heap_init (&heap, compareWEdge, buildWEdge, free);

  /* Step 2 and Step 4 */
  vindex = generic_list_head (&(graph->adjlists));
  for (; vindex != NULL; vindex = generic_list_next (vindex)) {
    <NAME>_adjlist_t* node = generic_list_data (vindex);

    /* Step 2 */
    <NAME>_uf_add_element (&dset, node->vertex);

    /* Step 4 */
    generic_list_elmt_t *vindex2 = generic_list_head (&(node->adjacent));
    for (; vindex2 != NULL; vindex2 = generic_list_next (vindex2)) {
      <NAME>_adjlist_elmt_t* node2 = generic_list_data (vindex2);
      we_t temp;
      temp.source = node->vertex;
      temp.destination = node2->vertex;
      temp.weight = node2->weight;
      if (temp.source < temp.destination) {
	generic_heap_insert (&heap, &temp);
      }
    }
  }

  /* /\* Print heap for lectures !! *\/ */
  /* printf ("Heap after all egdes inserted: "); */
  /* for (int i = 0; i < generic_heap_size (&heap); i++) { */
  /*   we_t* temp = (we_t*) heap.tree[i]; */
  /*   printf ("[%d: {%.1f, (%d, %d)}], ", i, temp->weight, temp->source, temp->destination); */
  /* } */
  /* printf ("END\n\n"); */
  /* /\* ***** *\/ */

  *span = malloc (sizeof (generic_list_t));
  generic_list_init (*span, NULL, buildWEdge, free);

  /* Step 5 */
  while (generic_heap_size (&heap) > 0) {
    we_t* currentWE = malloc (sizeof(we_t));
    generic_heap_extract (&heap, (void**) &currentWE);

    /* /\* Print heap for lectures !! *\/ */
    /* printf ("Heap after one egde extracted: "); */
    /* for (int i = 0; i < generic_heap_size (&heap); i++) { */
    /*   we_t* temp = (we_t*) heap.tree[i]; */
    /*   printf ("[%d: {%.1f, (%d, %d)}], ", i, temp->weight, temp->source, temp->destination); */
    /* } */
    /* printf ("END\n\n"); */
    /* /\* ***** *\/ */


    /* Step 6 */
    if (! <NAME>_uf_are_connected (&dset, currentWE->source, currentWE->destination)) {
      generic_list_ins_next (*span, generic_list_tail(*span), (void*) currentWE);
      <NAME>_uf_union (&dset, currentWE->source, currentWE->destination);
    }

    free (currentWE);
  }

  return 0;
}
