/*****************************************************************************
*                                                                            *
*  ------------------------------ traverse.c ------------------------------  *
*                                                                            *
*****************************************************************************/

#include "<NAME>_list.h"
#include "<NAME>_bitreealg.h"

/*****************************************************************************
*                                                                            *
*  ------------------------------- preorder -------------------------------  *
*                                                                            *
*****************************************************************************/

int <NAME>_preorder(<NAME>_bitreenode_t *node, <NAME>_list_t *list) {

  /* Load the list with a preorder listing of the tree. */
  if (!<NAME>_bitree_is_eob(node)) {
    if (<NAME>_list_ins_next(list, <NAME>_list_tail(list),
			     <NAME>_bitree_data(node)) != 0) {
      return -1;
    }

    if (!<NAME>_bitree_is_eob(<NAME>_bitree_left(node))) {
      if (<NAME>_preorder(<NAME>_bitree_left(node), list) != 0) {
	return -1;
      }
    }

    if (!<NAME>_bitree_is_eob(<NAME>_bitree_right(node))) {
      if (<NAME>_preorder(<NAME>_bitree_right(node), list) != 0) {
      return -1;
      }
    }
  }

  return 0;
}

/*****************************************************************************
*                                                                            *
*  -------------------------------- inorder -------------------------------  *
*                                                                            *
*****************************************************************************/

int <NAME>_inorder(<NAME>_bitreenode_t *node, <NAME>_list_t *list) {

  /* Load the list with an <NAME>_inorder listing of the tree. */
  if (!<NAME>_bitree_is_eob(node)) {

    if (!<NAME>_bitree_is_eob(<NAME>_bitree_left(node))) {
      if (<NAME>_inorder(<NAME>_bitree_left(node), list) != 0) {
	return -1;
      }
    }

    if (<NAME>_list_ins_next(list, <NAME>_list_tail(list),
			      <NAME>_bitree_data(node)) != 0) {
      return -1;
    }

    if (!<NAME>_bitree_is_eob(<NAME>_bitree_right(node))) {
      if (<NAME>_inorder(<NAME>_bitree_right(node), list) != 0) {
	return -1;
      }
    }
  }

  return 0;
}

/*****************************************************************************
*                                                                            *
*  ------------------------------- <NAME>_postorder ----------------------  *
*                                                                            *
*****************************************************************************/

int <NAME>_postorder(<NAME>_bitreenode_t *node, <NAME>_list_t *list) {

  /* Load the list with a postorder listing of the tree. */
  if (!<NAME>_bitree_is_eob(node)) {

    if (!<NAME>_bitree_is_eob(<NAME>_bitree_left(node))) {
      if (<NAME>_postorder(<NAME>_bitree_left(node), list) != 0) {
	return -1;
      }
    }

    if (!<NAME>_bitree_is_eob(<NAME>_bitree_right(node))) {
      if (<NAME>_postorder(<NAME>_bitree_right(node), list) != 0) {
	return -1;
      }
    }

    if (<NAME>_list_ins_next(list, <NAME>_list_tail(list),
			      <NAME>_bitree_data(node)) != 0) {
      return -1;
    }
  }

  return 0;
}
